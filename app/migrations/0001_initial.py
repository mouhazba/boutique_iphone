# Generated by Django 4.1.7 on 2023-03-27 13:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Iphone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ime', models.CharField(max_length=120, unique=True)),
                ('model', models.CharField(choices=[('7', '7'), ('8', '8'), ('11', '11'), ('12', '12'), ('13', '13'), ('X', 'X'), ('Xr', 'Xr'), ('Xsmax', 'Xsmax')], max_length=6)),
                ('category', models.CharField(choices=[('Simple', 'Simple'), ('+', '+'), ('Pro', 'Pro'), ('Promax', 'Promax')], max_length=6)),
                ('taille', models.CharField(choices=[('32', 32), ('64', 64), ('128', 128), ('256', 256), ('512', 512)], max_length=3)),
                ('stock', models.IntegerField(default=0)),
                ('price_acquisition', models.IntegerField(default=0)),
                ('date_acquisition', models.DateTimeField(blank=True, null=True)),
                ('price_marcher', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Moratoire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('nom', models.CharField(max_length=120)),
                ('prenom', models.CharField(max_length=120)),
                ('adresse', models.CharField(max_length=120)),
                ('tel', models.CharField(max_length=120, unique=True)),
                ('montant', models.IntegerField(default=0)),
                ('avance', models.IntegerField(default=0)),
                ('restant', models.IntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('iphone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.iphone')),
            ],
        ),
        migrations.CreateModel(
            name='Versement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versement', models.IntegerField(default=0)),
                ('restant_v', models.IntegerField(default=0)),
                ('date_versement', models.DateTimeField(auto_now_add=True)),
                ('client_moratoire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.moratoire')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('nom', models.CharField(max_length=120)),
                ('prenom', models.CharField(max_length=120)),
                ('adresse', models.CharField(max_length=120)),
                ('tel', models.CharField(max_length=120, unique=True)),
                ('montant', models.IntegerField(default=0)),
                ('date_achat', models.DateTimeField(auto_now_add=True)),
                ('iphone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.iphone')),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
